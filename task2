import numpy as np

# Function to check if the current board state is a terminal state
def is_terminal_state(board):
    # Check rows, columns, and diagonals for a win
    for i in range(3):
        if board[i].sum() == 3 or board[:, i].sum() == 3:
            return True, 1
        elif board[i].sum() == -3 or board[:, i].sum() == -3:
            return True, -1
    if np.trace(board) == 3 or np.trace(np.fliplr(board)) == 3:
        return True, 1
    elif np.trace(board) == -3 or np.trace(np.fliplr(board)) == -3:
        return True, -1
    
    # Check for a draw
    if np.count_nonzero(board) == 9:
        return True, 0
    
    # Game is not over
    return False, None

# Function to evaluate the current board state
def evaluate_board(board):
    terminal, winner = is_terminal_state(board)
    if terminal:
        return winner
    else:
        return 0

# Function to get all possible next moves
def get_possible_moves(board):
    moves = []
    for i in range(3):
        for j in range(3):
            if board[i][j] == 0:
                moves.append((i, j))
    return moves

# Minimax algorithm
def minimax(board, depth, maximizing_player):
    terminal, winner = is_terminal_state(board)
    if terminal or depth == 0:
        return evaluate_board(board)
    
    if maximizing_player:
        max_eval = -np.inf
        for move in get_possible_moves(board):
            new_board = board.copy()
            new_board[move] = 1
            eval = minimax(new_board, depth - 1, False)
            max_eval = max(max_eval, eval)
        return max_eval
    else:
        min_eval = np.inf
        for move in get_possible_moves(board):
            new_board = board.copy()
            new_board[move] = -1
            eval = minimax(new_board, depth - 1, True)
            min_eval = min(min_eval, eval)
        return min_eval

# Function to find the best move for the AI player
def find_best_move(board):
    best_move = None
    best_eval = -np.inf
    for move in get_possible_moves(board):
        new_board = board.copy()
        new_board[move] = 1
        eval = minimax(new_board, 10, False)
        if eval > best_eval:
            best_eval = eval
            best_move = move
    return best_move

# Function to print the current board
def print_board(board):
    symbols = {0: ' ', 1: 'X', -1: 'O'}
    for row in board:
        print("|".join(symbols[value] for value in row))
        print("-" * 5)

# Function to play the game
def play_game():
    board = np.zeros((3, 3), dtype=int)
    print("Welcome to Tic-Tac-Toe!")
    print_board(board)
    
    while True:
        row = int(input("Enter row (0, 1, 2): "))
        col = int(input("Enter column (0, 1, 2): "))
        
        if board[row][col] != 0:
            print("Invalid move. Try again.")
            continue
        
        board[row][col] = -1
        print_board(board)
        
        terminal, winner = is_terminal_state(board)
        if terminal:
            if winner == 0:
                print("It's a draw!")
            elif winner == -1:
                print("You win!")
            else:
                print("Computer wins!")
            break
        
        print("Computer is thinking...")
        ai_move = find_best_move(board)
        board[ai_move] = 1
        print_board(board)
        
        terminal, winner = is_terminal_state(board)
        if terminal:
            if winner == 0:
                print("It's a draw!")
            elif winner == -1:
                print("You win!")
            else:
                print("Computer wins!")
            break

# Play the game
play_game()
